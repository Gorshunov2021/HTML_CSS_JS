'use strict';
//Унарный минус. Меняет знак числа на противоположный.
let x=33;
x=-x;
alert(x);

//Бинарным называется оператор, который применяется к двум операндам. Тот же минус существует и в бинарной форме:
let z=2, y=21;
alert(y-z-z);

//Остаток
alert( 5 % 2 ); // 1, остаток от деления 5 на 2
alert( 8 % 3 ); // 2, остаток от деления 8 на 3

//Возведение в степень **
alert( 2 ** 2 ); // 4  (2 умножено на себя 2 раза)
alert( 2 ** 3 ); // 8  (2 * 2 * 2, 3 раза)
alert( 2 ** 4 ); // 16 (2 * 2 * 2 * 2, 4 раза)

//Математически, оператор работает и для нецелых чисел. Например, квадратный корень является возведением в степень 1/2:
alert( 4 ** (1/2) ); // 2 (степень 1/2 эквивалентна взятию квадратного корня)
alert( 8 ** (1/3) ); // 2 (степень 1/3 эквивалентна взятию кубического корня)

let s="I"+" "+" "+"lern"+" "+"ENGLISH"+" "+"!!!";
alert(s);

alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"

//А вот это посложнее!!! Как ВАМ???
alert(2 + 2 + '1' ); // будет "41", а не "221"

alert( 6 - '2' ); // 4, '2' приводится к числу
alert( '6' / '2' ); // 3, оба операнда приводятся к числам

// Не влияет на числа
let x2 = 11;
alert( +x2 ); // 11

let y2 = -22;
alert( +y2 ); // -22

// Преобразует не числа в числа
alert( +true ); // 1
alert( +"" );   // 0

let appless = "2";
let orangess = "3";
alert( appless + orangess ); // "23", так как бинарный плюс объединяет строки

let apples = "2";
let oranges = "3";

// оба операнда предварительно преобразованы в числа
alert( +apples + +oranges ); // 5

// более длинный вариант

alert( Number(apples) + Number(oranges) ); // 5